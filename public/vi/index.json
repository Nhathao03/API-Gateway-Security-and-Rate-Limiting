[
{
	"uri": "//localhost:1313/vi/3-configcognito/3.3-authenticationandstorage/",
	"title": "API Gateway Security and Rate Limiting",
	"tags": [],
	"description": "",
	"content": "Triển khai ASP.NET Core API + React JS + SQL Server 2019 trên AWS Tổng quan Trong bài lab này, bạn sẽ tìm hiểu các khái niệm cơ bản và thực hành về Amazon API Gateway Security and Rate Limiting - Session Management. Thực hành tạo kết nối đến máy chủ public và máy chủ private trong VPC.\n"
},
{
	"uri": "//localhost:1313/vi/3-configcognito/3.4-accesslevel/",
	"title": "API Gateway Security and Rate Limiting",
	"tags": [],
	"description": "",
	"content": "Tổng quan Trong phần này, chúng ta sẽ sử dụng thư viện Amplify để xác thực người dùng bằng Amazon Cognito, upload tệp lên S3 bucket.\n"
},
{
	"uri": "//localhost:1313/vi/",
	"title": "API Gateway Security and Rate Limiting",
	"tags": [],
	"description": "",
	"content": "Triển khai ASP.NET Core API + React JS + SQL Server 2019 trên AWS Tổng quan Trong bài lab này, bạn sẽ tìm hiểu các khái niệm cơ bản và thực hành về Amazon API Gateway Security and Rate Limiting - Session Management. Thực hành tạo kết nối đến máy chủ public và máy chủ private trong VPC.\n"
},
{
	"uri": "//localhost:1313/vi/1-introduce/",
	"title": "Giới thiệu",
	"tags": [],
	"description": "",
	"content": "Giới thiệu đề tài Trong bối cảnh các hệ thống hiện đại ngày càng phụ thuộc vào API để giao tiếp giữa các dịch vụ, việc đảm bảo an toàn cho các API trở thành một nhiệm vụ thiết yếu. Một API không được bảo vệ đúng cách có thể trở thành điểm yếu khiến cả hệ thống bị tấn công, gây mất dữ liệu, gián đoạn dịch vụ hoặc vi phạm tuân thủ bảo mật.\nĐề tài “API Security Gateway với Advanced Protection” hướng đến việc triển khai một kiến trúc API Gateway bảo mật cao cấp trên nền tảng AWS, tích hợp đầy đủ các lớp bảo vệ hiện đại và quy chuẩn an ninh, bao gồm:\nThreat Protection: Bảo vệ chống lại các cuộc tấn công như DDoS, SQL injection, XSS\u0026hellip; Rate Limiting: Giới hạn tốc độ truy cập API theo IP hoặc theo người dùng. Authentication: Cơ chế xác thực mạnh mẽ, hỗ trợ OAuth2, JWT, SSO\u0026hellip; Authorization: Phân quyền chi tiết theo vai trò, nhóm người dùng. Monitoring \u0026amp; Logging: Giám sát thời gian thực, alert, truy vết sự cố. Operational Readiness: Triển khai, bảo trì và quản lý vận hành thuận tiện. Developer Integration: Hỗ trợ tốt cho việc tích hợp frontend/backend và CI/CD. Mục tiêu triển khai Hướng dẫn sẽ tập trung vào việc cấu hình và triển khai các dịch vụ native của AWS để đạt được các yêu cầu sau:\nYêu cầu kỹ thuật Dịch vụ sử dụng trên AWS Threat Protection AWS Shield, AWS WAF DNS Protection + Entry Point Amazon Route 53 API Gateway Management Amazon API Gateway Authentication / Authorization Amazon Cognito, JWT, IAM Rate Limiting AWS WAF Rate-based rules, API Gateway quotas Business Logic AWS Lambda Data Storage Amazon S3, DynamoDB, Aurora Serverless Monitoring / Alerting Amazon CloudWatch, X-Ray Kiến trúc hệ thống Hệ thống được thiết kế theo hướng zero-trust, với các lớp bảo vệ theo chiều sâu từ lớp biên (network) đến ứng dụng và dữ liệu.\nNội dung blog gồm 3 phần chính Giới thiệu đề tài (bạn đang xem) Hướng dẫn triển khai chi tiết trên AWS Console: Cấu hình từng thành phần như Shield, WAF, Cognito, API Gateway, v.v. Kết nối và tích hợp giữa các dịch vụ. Dọn dẹp tài nguyên sau triển khai: Hướng dẫn xóa các dịch vụ đã sử dụng để tránh phát sinh chi phí. Yêu cầu trước khi bắt đầu Một tài khoản AWS với quyền quản trị hoặc IAM đủ quyền thao tác. Kiến thức cơ bản về REST API, bảo mật web (JWT, OAuth2, IAM). Một tên miền nếu bạn muốn cấu hình với Route 53 và CloudFront. Cài đặt sẵn AWS CLI nếu muốn thao tác kết hợp terminal. Kết luận Hướng dẫn này phù hợp cho cả:\nNhà phát triển đang xây dựng hệ thống API trên AWS DevOps hoặc Security Engineer triển khai mô hình bảo mật phân lớp Học viên hoặc kỹ sư muốn tìm hiểu kiến trúc bảo mật API hiện đại "
},
{
	"uri": "//localhost:1313/vi/3-configcognito/3.1-introduceamplify/",
	"title": "Giới thiệu về Amplify",
	"tags": [],
	"description": "",
	"content": "Overview AWS Amplify là bộ công cụ hỗ trợ lập trình viên xây dựng và triển khai nhanh các ứng dụng web/mobile tích hợp với các dịch vụ AWS như API, Authentication, Storage, Hosting. Amplify giúp đơn giản hóa quá trình quản lý backend, cung cấp thư viện frontend và dịch vụ hosting sẵn sàng cho sản phẩm.\nAuthentication with Amplify Authentication with Amplify giúp dễ dàng tích hợp tính năng xác thực người dùng vào ứng dụng với Amazon Cognito làm backend. Hỗ trợ đăng ký, đăng nhập, quên mật khẩu, xác thực đa yếu tố (MFA), xác thực xã hội (Google, Facebook, Apple), cho phép lập trình viên triển khai nhanh bảo mật người dùng.\nStorage with Amplify Storage with Amplify cung cấp giải pháp lưu trữ tệp (hình ảnh, video, tài liệu) thông qua Amazon S3. Dữ liệu có thể được quản lý theo quyền riêng tư (public, protected, private), tích hợp sẵn với xác thực người dùng để kiểm soát quyền truy cập, hỗ trợ upload, download và chia sẻ tệp an toàn.\n"
},
{
	"uri": "//localhost:1313/vi/2-deloydatabase/2.1-createdynamodbtable/",
	"title": "Tạo bảng với DynamoDB",
	"tags": [],
	"description": "",
	"content": "CREATE DYNAMODB TABLE Open DynamoDB console Click Create table Enter table name: Documents Enter Parition key is user_id Enter Sort key is file In Table setting section, select Customsize setting Keep DynamoDB Standard for Table class Select On-demand for Capacity mode Scroll to the bottom of the page, click Create table "
},
{
	"uri": "//localhost:1313/vi/2-deloydatabase/2.2-createlambdafunctions/2.2.1-createlistingfunction/",
	"title": "Tạo function liệt kê",
	"tags": [],
	"description": "",
	"content": "Trong phần này chúng ta sẽ tạo function để liệt kê các tài liệu được lưu trong DynamoDB table theo id của người dùng.\nMở bảng điều kiển AWS Lambda console Nhấn nút Create function Nhập tên function: list_documents Chọn Python 3.9 cho mục Runtime Nhấn nút Create function Nhập vào đoạn code sau cho tệp lambda_function.py: import json import boto3 import os from decimal import * from boto3.dynamodb.types import TypeDeserializer dynamodb = boto3.client(\u0026#39;dynamodb\u0026#39;) serializer = TypeDeserializer() class DecimalEncoder(json.JSONEncoder): def default(self, obj): if isinstance(obj, Decimal): return str(obj) return json.JSONEncoder.default(self, obj) def deserialize(data): if isinstance(data, list): return [deserialize(v) for v in data] if isinstance(data, dict): try: return serializer.deserialize(data) except TypeError: return {k: deserialize(v) for k, v in data.items()} else: return data def lambda_handler(event, context): table_name = os.environ[\u0026#39;TABLE_NAME\u0026#39;] user_id = event[\u0026#39;pathParameters\u0026#39;][\u0026#39;id\u0026#39;] print(user_id) docs = dynamodb.query( TableName=table_name, KeyConditionExpression=\u0026#34;user_id = :id\u0026#34;, ExpressionAttributeValues={ \u0026#34;:id\u0026#34;: { \u0026#39;S\u0026#39;: user_id } } ) format_data_docs = deserialize(docs[\u0026#34;Items\u0026#34;]) # TODO implement return { \u0026#34;statusCode\u0026#34;: 200, \u0026#34;headers\u0026#34;: { \u0026#34;Content-Type\u0026#34;: \u0026#34;application/json\u0026#34;, \u0026#34;Access-Control-Allow-Origin\u0026#34;: \u0026#34;*\u0026#34;, \u0026#34;Access-Control-Allow-Methods\u0026#34;: \u0026#34;GET,PUT,POST,DELETE, OPTIONS\u0026#34;, \u0026#34;Access-Control-Allow-Headers\u0026#34;: \u0026#34;Access-Control-Allow-Headers, Origin,Accept, X-Requested-With, Content-Type, Access-Control-Request-Method,X-Access-Token,XKey,Authorization\u0026#34; }, \u0026#34;body\u0026#34;: json.dumps(format_data_docs, cls=DecimalEncoder) } Sau đó nhấn nút Deloy Đoạn code trên thực hiện lấy biến môi trường TABLE_NAME và id của người dùng từ event. Sau đó query đến DynamoDB table với điều kiện giá trị của Partition key bằng id của người dùng. Sau đó định dạng lại dữ liệu được trả về sau khi query.\nChúng ta cần thêm biến môi trường cho function. Ấn tab Configuration, sau đó chọn Environment variables ở menu phía bên trái. Ấn Edit Nhấn nút Add environment variable Nhập TABLE_NAME vào key Nhập tên DynamoDB table bạn vừa tạo làm giá trị Nhấn nút Save Tiếp theo, thêm quyền cho function để truy cập vào DynamoDB table Nhấn nút Permission ở menu bên trái Ấn vào tên role mà lambda function đang thực hiện Mở rộng chính sách AWSLambdaBasicExecutionRole… sau đó ấn Edit Nhấn nút JSON. Sao chép đoạn json dưới đây vào editor ,\r{\r\u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;,\r\u0026#34;Action\u0026#34;: [\r\u0026#34;dynamodb:Query\u0026#34;\r],\r\u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:dynamodb:REGION:ACCOUNT_ID:table/Documents\u0026#34;\r} Thay thế REGION và ACCOUNT_ID bằng vùng mà bạn tạo bảng và account id của bạn.\nNhấn nút Review policy Nhấn nút Save changes "
},
{
	"uri": "//localhost:1313/vi/3-configcognito/3.2-preparation/",
	"title": "API Gateway Security and Rate Limiting",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/vi/2-deloydatabase/2.2-createlambdafunctions/",
	"title": "Tạo các Lambda function",
	"tags": [],
	"description": "",
	"content": "Content Tạo function liệt kê Tạo function tạo dữ liệu Tạo function xóa dữ liệu "
},
{
	"uri": "//localhost:1313/vi/2-deloydatabase/2.2-createlambdafunctions/2.2.2-createcreatingfunction/",
	"title": "Tạo function tạo dữ liệu",
	"tags": [],
	"description": "",
	"content": "Trong phần này chúng ta sẽ tạo function để thêm thông tin tài liệu được lưu trong DynamoDB table.\nMở bảng điều kiển AWS Lambda console Nhấn nút Create function Nhập tên function: upload_document Chọn Python 3.9 cho mục Runtime Nhấn nút Create function Nhập vào đoạn code sau cho tệp lambda_function.py: import json import boto3 import os from datetime import datetime, timezone dynamodb = boto3.resource(\u0026#39;dynamodb\u0026#39;) def lambda_handler(event, context): table_name = os.environ[\u0026#39;TABLE_NAME\u0026#39;] now = datetime.now(tz=timezone.utc) dt_string = now.strftime(\u0026#34;%d/%m/%Y %H:%M:%S\u0026#34;) #doc_data = json.loads(event[\u0026#34;body\u0026#34;]) doc_data = event[\u0026#34;body\u0026#34;] path = \u0026#34;protected/{}/{}\u0026#34;.format(doc_data[\u0026#39;identityId\u0026#39;], doc_data[\u0026#39;file\u0026#39;]) doc_data.update({\u0026#34;path\u0026#34;: path, \u0026#34;modified\u0026#34;: dt_string}) table = dynamodb.Table(table_name) table.put_item(Item = doc_data) # TODO implement return { \u0026#39;statusCode\u0026#39;: 200, \u0026#39;body\u0026#39;: \u0026#39;successfully upload!\u0026#39;, \u0026#39;headers\u0026#39;: { \u0026#39;Content-Type\u0026#39;: \u0026#39;application/json\u0026#39;, \u0026#34;Access-Control-Allow-Headers\u0026#34;: \u0026#34;Access-Control-Allow-Headers, Origin, Accept, X-Requested-With, Content-Type, Access-Control-Request-Method,X-Access-Token, XKey, Authorization\u0026#34;, \u0026#34;Access-Control-Allow-Origin\u0026#34;: \u0026#34;*\u0026#34;, \u0026#34;Access-Control-Allow-Methods\u0026#34;: \u0026#34;GET,PUT,POST,DELETE,OPTIONS\u0026#34; } } Sau đó nhấn nút Deloy Đoạn code trên thực hiện lấy biến môi trường TABLE_NAME và dữ liệu của event. Sau đó thêm từng item vào DynamoDB table.\nChúng ta cần thêm biến môi trường cho function. Ấn tab Configuration, sau đó chọn Environment variables ở menu phía bên trái. Ấn Edit Nhấn nút Add environment variable Nhập TABLE_NAME vào key Nhập tên DynamoDB table bạn vừa tạo làm giá trị Nhấn nút Save Tiếp theo, thêm quyền cho function để truy cập vào DynamoDB table Nhấn nút Permission ở menu bên trái Ấn vào tên role mà lambda function đang thực hiện Mở rộng chính sách AWSLambdaBasicExecutionRole… sau đó ấn Edit Nhấn nút JSON. Sao chép đoạn json dưới đây vào editor ,\r{\r\u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;,\r\u0026#34;Action\u0026#34;: [\r\u0026#34;dynamodb:Query\u0026#34;\r],\r\u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:dynamodb:REGION:ACCOUNT_ID:table/Documents\u0026#34;\r} Thay thế REGION và ACCOUNT_ID bằng vùng mà bạn tạo bảng và account id của bạn.\nNhấn nút Review policy Nhấn nút Save changes "
},
{
	"uri": "//localhost:1313/vi/2-deloydatabase/",
	"title": "Triển khai cơ sở dữ liệu",
	"tags": [],
	"description": "",
	"content": "Nội dung Tạo bảng với DynamoDB Tạo các Lambda function Kiểm tra các function "
},
{
	"uri": "//localhost:1313/vi/3-configcognito/",
	"title": "Cấu hình Cognito",
	"tags": [],
	"description": "",
	"content": "Tổng quan Trong phần này, chúng ta sẽ sử dụng thư viện Amplify để xác thực người dùng bằng Amazon Cognito, upload tệp lên S3 bucket.\nNội dung Chuẩn bị Xác thực và lưu trữ Cấp độ truy cập "
},
{
	"uri": "//localhost:1313/vi/2-deloydatabase/2.3-testlambdafunctions/",
	"title": "Kiểm tra các funcrion",
	"tags": [],
	"description": "",
	"content": "Trong phần này chúng ta sẽ tạo kiểm tra xem các function có hoạt động đúng hay không.\nĐể kiểm tra các function, bạn hãy tải tệp dưới đây về máy và chạy câu lệnh: aws dynamodb batch-write-item --request-items file://documentData.json\n📎 Document Data\ndocumentData.json (3 KB) Kiểm tra function liệt kê Mở bảng điều kiển của function list_documents Ấn tab Test Nhập tc_1 cho tên event Nhập đoạn json dưới đây cho Event JSON { \u0026#34;pathParameters\u0026#34;: {\r\u0026#34;id\u0026#34;: \u0026#34;abcd1234\u0026#34;\r}\r} Ấn Save, sau đó ấn Test Bạn sẽ nhận kết quả trả về là toàn bộ thông tin của các tệp của người dùng với id là abcd1234 Kiểm tra function tạo dữ liệu Mở bảng điều khiển của function upload_document Ấn tab Test Nhập tc_1 cho tên event Nhập đoạn json dưới đây cho Event JSON {\r\u0026#34;body\u0026#34;:{\r\u0026#34;user_id\u0026#34;: \u0026#34;abcd1234\u0026#34;,\r\u0026#34;file\u0026#34;: \u0026#34;aws_serverless.doc\u0026#34;,\r\u0026#34;folder\u0026#34;: \u0026#34;\u0026#34;,\r\u0026#34;identityId\u0026#34;: \u0026#34;123456cvbn\u0026#34;,\r\u0026#34;modified\u0026#34;: \u0026#34;13-03-2023\u0026#34;,\r\u0026#34;size\u0026#34;: \u0026#34;2MB\u0026#34;,\r\u0026#34;type\u0026#34;: \u0026#34;doc\u0026#34;,\r\u0026#34;tag\u0026#34;: \u0026#34;aws, serverless\u0026#34;\r}\r} Ấn Save, sau đó ấn Test Bạn sẽ nhận kết quả trả về là succeeded Mở bảng Documents để kiểm tra xem đã thêm thành công hay chưa Kiểm tra function xóa dữ liệu Mở bảng điều kiển của function delete_documents Ấn tab Test Nhập tc_1 cho tên event Nhập đoạn json dưới đây cho Event JSON {\r\u0026#34;pathParameters\u0026#34;: {\r\u0026#34;id\u0026#34;: \u0026#34;abcd1234\u0026#34;\r},\r\u0026#34;queryStringParameters\u0026#34;: {\r\u0026#34;file\u0026#34;: \u0026#34;aws-exports.js\u0026#34;\r}\r} Ấn Save, sau đó ấn Test Bạn sẽ nhận kết quả trả về là succeeded Mở bảng Documents để xem là đã xóa thành công hay chưa Vậy là bạn đã hoàn thành tạo các Lambda function tương tác với DynamoDB. Trong bài tiếp theo chúng ta xác thực vào lưu trữ với thư viện Amplify.\n"
},
{
	"uri": "//localhost:1313/vi/2-deloydatabase/2.2-createlambdafunctions/2.2.3-createdeletingfunction/",
	"title": "Tạo function xóa dữ liệu",
	"tags": [],
	"description": "",
	"content": "Trong phần này chúng ta sẽ tạo function để xoá thông tin tài liệu được lưu trong DynamoDB table theo id của người dùng và tên tệp.\nMở bảng điều kiển AWS Lambda console Nhấn nút Create function Nhập tên function: delete_documents Chọn Python 3.9 cho mục Runtime Nhấn nút Create function Nhập vào đoạn code sau cho tệp lambda_function.py: import json import boto3 import os client = boto3.resource(\u0026#39;dynamodb\u0026#39;) def lambda_handler(event, context): # TODO implement table_name = os.environ[\u0026#39;TABLE_NAME\u0026#39;] error = None doc_pk = event[\u0026#39;pathParameters\u0026#39;][\u0026#39;id\u0026#39;] print(\u0026#34;doc_pk \u0026#34;, doc_pk) doc_sk = event[\u0026#39;queryStringParameters\u0026#39;][\u0026#39;file\u0026#39;] print(\u0026#34;doc_sk \u0026#34;, doc_sk) table = client.Table(table_name) key = { \u0026#39;user_id\u0026#39;:doc_pk, \u0026#39;file\u0026#39;: doc_sk } try: table.delete_item(Key = key) except Exception as e: error = e except Exception as e: error = e if error is None: message = \u0026#39;delete document successful!\u0026#39; else: print(error) message = \u0026#39;delete document fail\u0026#39; return { \u0026#39;statusCode\u0026#39;: 200, \u0026#39;body\u0026#39;: message, \u0026#39;headers\u0026#39;: { \u0026#39;Content-Type\u0026#39;: \u0026#39;application/json\u0026#39;, \u0026#39;Access-Control-Allow-Origin\u0026#39;: \u0026#39;*\u0026#39; }, } Sau đó nhấn nút Deloy Đoạn code trên thực hiện lấy biến môi trường TABLE_NAME và partition key và sort key từ event. Sau đó thêm xoá item có partition key và sort key khớp với input.\nChúng ta cần thêm biến môi trường cho function. Ấn tab Configuration, sau đó chọn Environment variables ở menu phía bên trái. Ấn Edit Nhấn nút Add environment variable Nhập TABLE_NAME vào key Nhập tên DynamoDB table bạn vừa tạo làm giá trị Nhấn nút Save Tiếp theo, thêm quyền cho function để truy cập vào DynamoDB table Nhấn nút Permission ở menu bên trái Ấn vào tên role mà lambda function đang thực hiện Mở rộng chính sách AWSLambdaBasicExecutionRole… sau đó ấn Edit Nhấn nút JSON. Sao chép đoạn json dưới đây vào editor ,\r{\r\u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;,\r\u0026#34;Action\u0026#34;: \u0026#34;dynamoDB:PutItem\u0026#34;,\r\u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:dynamodb:REGION:ACCOUNT_ID:table/Documents\u0026#34;\r} Thay thế REGION và ACCOUNT_ID bằng vùng mà bạn tạo bảng và account id của bạn.\nNhấn nút Review policy Nhấn nút Save changes "
},
{
	"uri": "//localhost:1313/vi/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/vi/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]