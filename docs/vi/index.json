[
{
	"uri": "//localhost:1313/vi/",
	"title": "API Gateway Security and Rate Limiting",
	"tags": [],
	"description": "",
	"content": "Work with Amazon API Gateway Security and Rate Limiting - Session Manager Overall In this lab, you\u0026rsquo;ll learn the basics and practice of Amazon API Gateway Security and Rate Limiting - Session Manager Perform creating public and private instance connections.\n"
},
{
	"uri": "//localhost:1313/vi/3-configcognito/3.3-authenticationandstorage/3.3.1-authenticationwithamplify/",
	"title": "Application với Amplify",
	"tags": [],
	"description": "",
	"content": " Chạy câu lệnh dưới đây tại thư mục gốc của ứng dụng mà bạn clone về để thêm authentication cho ứng dụng: amplify add auth Chọn theo các thông tin dưới đây:\nDo you want to use the default authentication and security configuration? Default configuration Warning: you will not be able to edit these selections. How do you want users to be able to sign in? Username Do you want to configure advanced settings? No, I am done. Chạy câu lệnh sau để cập nhật tài nguyên trên cloud: amplify push Mở lại bảng điều khiển của CloudFormation để kiểm tra xem stack đã được tạo hay chưa. Ấn id của UserPool để mở bảng điều khiển của Cognito User Pool Chạy câu lệnh sau để bắt đầu với ứng dụng: npm start Ấn Sign up để đăng ký tài khoản mới. Nhập thông tin người dùng: Tên người dùng, ví dụ: admin Nhập email của bạn. Mật khẩu, ví dụ: Admin123 Ấn Sign up Mở lại bảng điều khiển của Cognito User Pool, chọn tab User bạn sẽ thấy một người dùng đã được đăng ký nhưng chưa xác nhận Mở mail của bạn để lấy mã xác thực đã được gửi tự động. Nhập mã xác nhập vào ứng dụng rồi ấn Submit Mở lại bảng điều khiển của Cognito User Pool, ấn biểu tượng Refresh bạn sẽ thấy ngừoi dùng đã được xác thực Đăng nhập vào ứng dụng với tài khoản bạn vừa đăng ký. Bạn đã đăng nhập thành công. "
},
{
	"uri": "//localhost:1313/vi/1-introduce/",
	"title": "Giới thiệu",
	"tags": [],
	"description": "",
	"content": "Giới thiệu đề tài Trong bối cảnh các hệ thống hiện đại ngày càng phụ thuộc vào API để giao tiếp giữa các dịch vụ, việc đảm bảo an toàn cho các API trở thành một nhiệm vụ thiết yếu. Một API không được bảo vệ đúng cách có thể trở thành điểm yếu khiến cả hệ thống bị tấn công, gây mất dữ liệu, gián đoạn dịch vụ hoặc vi phạm tuân thủ bảo mật.\nĐề tài “API Security Gateway với Advanced Protection” hướng đến việc triển khai một kiến trúc API Gateway bảo mật cao cấp trên nền tảng AWS, tích hợp đầy đủ các lớp bảo vệ hiện đại và quy chuẩn an ninh, bao gồm:\nMục tiêu triển khai Hướng dẫn sẽ tập trung vào việc cấu hình và triển khai các dịch vụ native của AWS để đạt được các yêu cầu sau:\nYêu cầu kỹ thuật Dịch vụ sử dụng trên AWS Threat Protection AWS Shield, AWS WAF API Gateway Management Amazon API Gateway Authentication Amazon Cognito Business Logic AWS Lambda Data Storage Amazon S3, DynamoDB Monitoring Amazon CloudWatch "
},
{
	"uri": "//localhost:1313/vi/3-configcognito/3.1-introduceamplify/",
	"title": "Giới thiệu về Amplify",
	"tags": [],
	"description": "",
	"content": "Overview AWS Amplify là bộ công cụ hỗ trợ lập trình viên xây dựng và triển khai nhanh các ứng dụng web/mobile tích hợp với các dịch vụ AWS như API, Authentication, Storage, Hosting. Amplify giúp đơn giản hóa quá trình quản lý backend, cung cấp thư viện frontend và dịch vụ hosting sẵn sàng cho sản phẩm.\nAuthentication with Amplify Authentication with Amplify giúp dễ dàng tích hợp tính năng xác thực người dùng vào ứng dụng với Amazon Cognito làm backend. Hỗ trợ đăng ký, đăng nhập, quên mật khẩu, xác thực đa yếu tố (MFA), xác thực xã hội (Google, Facebook, Apple), cho phép lập trình viên triển khai nhanh bảo mật người dùng.\nStorage with Amplify Storage with Amplify cung cấp giải pháp lưu trữ tệp (hình ảnh, video, tài liệu) thông qua Amazon S3. Dữ liệu có thể được quản lý theo quyền riêng tư (public, protected, private), tích hợp sẵn với xác thực người dùng để kiểm soát quyền truy cập, hỗ trợ upload, download và chia sẻ tệp an toàn.\n"
},
{
	"uri": "//localhost:1313/vi/2-deloydatabase/2.1-createdynamodbtable/",
	"title": "Tạo bảng với DynamoDB",
	"tags": [],
	"description": "",
	"content": "CREATE DYNAMODB TABLE Open DynamoDB console Click Create table Enter table name: Documents Enter Parition key is user_id Enter Sort key is file In Table setting section, select Customsize setting Keep DynamoDB Standard for Table class Select On-demand for Capacity mode Scroll to the bottom of the page, click Create table "
},
{
	"uri": "//localhost:1313/vi/7-configiam/7.1-createpolicy/",
	"title": "Tạo chính sach mới",
	"tags": [],
	"description": "",
	"content": "In this section, chúng ta sẽ cấu hình IAM để tăng bảo mật cho API.\nTạo chính sách mới Mở bảng điều khiển AWS IAM Ấn Policy, sau đó ấn Create policy Tại mục Specify permissions: Ấn JSON Sao chép chính sách dưới đây vào mục Policy Ấn Next {\r\u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;,\r\u0026#34;Statement\u0026#34;: [\r{\r\u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;,\r\u0026#34;Action\u0026#34;: \u0026#34;execute-api:Invoke\u0026#34;,\r\u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:execute-api:\u0026lt;REGION\u0026gt;:\u0026lt;ACCOUNT_ID\u0026gt;:\u0026lt;API_ID\u0026gt;/*\u0026#34;\r}\r]\r} Tại mục Policy details: Nhập tên chính sách: fcjdmswebstore_5801_policy Ấn Next "
},
{
	"uri": "//localhost:1313/vi/2-deloydatabase/2.2-createlambdafunctions/2.2.1-createlistingfunction/",
	"title": "Tạo function liệt kê",
	"tags": [],
	"description": "",
	"content": "Trong phần này chúng ta sẽ tạo function để liệt kê các tài liệu được lưu trong DynamoDB table theo id của người dùng.\nTạo hàm liệt kê Mở bảng điều kiển AWS Lambda console Nhấn nút Create function Nhập tên function: list_documents Chọn Python 3.9 cho mục Runtime Nhấn nút Create function Nhập vào đoạn code sau cho tệp lambda_function.py: import json import boto3 import os from decimal import * from boto3.dynamodb.types import TypeDeserializer dynamodb = boto3.client(\u0026#39;dynamodb\u0026#39;) serializer = TypeDeserializer() class DecimalEncoder(json.JSONEncoder): def default(self, obj): if isinstance(obj, Decimal): return str(obj) return json.JSONEncoder.default(self, obj) def deserialize(data): if isinstance(data, list): return [deserialize(v) for v in data] if isinstance(data, dict): try: return serializer.deserialize(data) except TypeError: return {k: deserialize(v) for k, v in data.items()} else: return data def lambda_handler(event, context): table_name = os.environ[\u0026#39;TABLE_NAME\u0026#39;] user_id = event[\u0026#39;pathParameters\u0026#39;][\u0026#39;id\u0026#39;] print(user_id) docs = dynamodb.query( TableName=table_name, KeyConditionExpression=\u0026#34;user_id = :id\u0026#34;, ExpressionAttributeValues={ \u0026#34;:id\u0026#34;: { \u0026#39;S\u0026#39;: user_id } } ) format_data_docs = deserialize(docs[\u0026#34;Items\u0026#34;]) # TODO implement return { \u0026#34;statusCode\u0026#34;: 200, \u0026#34;headers\u0026#34;: { \u0026#34;Content-Type\u0026#34;: \u0026#34;application/json\u0026#34;, \u0026#34;Access-Control-Allow-Origin\u0026#34;: \u0026#34;*\u0026#34;, \u0026#34;Access-Control-Allow-Methods\u0026#34;: \u0026#34;GET,PUT,POST,DELETE, OPTIONS\u0026#34;, \u0026#34;Access-Control-Allow-Headers\u0026#34;: \u0026#34;Access-Control-Allow-Headers, Origin,Accept, X-Requested-With, Content-Type, Access-Control-Request-Method,X-Access-Token,XKey,Authorization\u0026#34; }, \u0026#34;body\u0026#34;: json.dumps(format_data_docs, cls=DecimalEncoder) } Sau đó nhấn nút Deloy Đoạn code trên thực hiện lấy biến môi trường TABLE_NAME và id của người dùng từ event. Sau đó query đến DynamoDB table với điều kiện giá trị của Partition key bằng id của người dùng. Sau đó định dạng lại dữ liệu được trả về sau khi query.\nChúng ta cần thêm biến môi trường cho function. Ấn tab Configuration, sau đó chọn Environment variables ở menu phía bên trái. Ấn Edit Nhấn nút Add environment variable Nhập TABLE_NAME vào key Nhập tên DynamoDB table bạn vừa tạo làm giá trị Nhấn nút Save Tiếp theo, thêm quyền cho function để truy cập vào DynamoDB table Nhấn nút Permission ở menu bên trái Ấn vào tên role mà lambda function đang thực hiện Mở rộng chính sách AWSLambdaBasicExecutionRole… sau đó ấn Edit Nhấn nút JSON. Sao chép đoạn json dưới đây vào editor ,\r{\r\u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;,\r\u0026#34;Action\u0026#34;: [\r\u0026#34;dynamodb:Query\u0026#34;\r],\r\u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:dynamodb:REGION:ACCOUNT_ID:table/Documents\u0026#34;\r} Thay thế REGION và ACCOUNT_ID bằng vùng mà bạn tạo bảng và account id của bạn.\nNhấn nút Review policy Nhấn nút Save changes "
},
{
	"uri": "//localhost:1313/vi/4-frontendintergrationwithfrontend/4.1-deloyfrontend/",
	"title": "Triển khai giao diện người dùng",
	"tags": [],
	"description": "",
	"content": "Bước đầu trong phần này, chúng ta sẽ host ứng dụng web với S3 Static website hosting:\nMở bảng điều khiển Amazon S3 Console\nNhấn chọn Create Bucket Nhập tên cho bucket, ví dụ như fcjdmswebstore-5801 Bỏ chọn chặn cho phép truy cập public\nTích vào mục I acknowledge that the current settings might result in this bucket and the objects within becoming public Ấn nút Create bucket Ấn vào bucket đã tạo Ấn tab Properties Kéo xuống cuối trang, ấn edit của mục Static web hosting Chọn Enable để kích hoạt host web tình trên S3\nChọn Host a static website cho mục Hosting type Nhập index.html cho mục Index document Ấn Save changes Sau khi kích hoạt thành công, bạn hãy ghi lại đường dẫn của web Sau đó, chúng ta cần thêm policy cho S3 bucket để có thể truy cập được: Chọn tab Permissions Ấn Edit của mục Bucket policy Sao chép chính sách dưới đây vào mục Policy {\r\u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;,\r\u0026#34;Statement\u0026#34;: [\r{\r\u0026#34;Sid\u0026#34;: \u0026#34;PublicReadGetObject\u0026#34;,\r\u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;,\r\u0026#34;Principal\u0026#34;: \u0026#34;*\u0026#34;,\r\u0026#34;Action\u0026#34;: \u0026#34;s3:GetObject\u0026#34;,\r\u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:s3:::BUCKET_NAME/*\u0026#34;\r}\r]\r} Thay thế BUCKET_NAME với tên bucket mà bạn đã đặt, sau đó ấn Save changes Mở tệp src/component/Home/Upload.js trong thư mục source code của ứng dụng và bỏ comment đoạn code gọi API ghi dữ liệu vào DynamoDB. Tiếp theo chạy câu lệnh sau tại thư mục gốc của project bạn đã tải về. (FCJ-Serverless-DMS) yarn build\raws s3 cp build s3://BUCKET_NAME --recursive Thay thế BUCKET_NAME với tên bucket mà bạn đã đặt Kết quả sau khi chạy xong câu lệnh Dán đường dẫn web mà bạn vừa ghi lại vào trình duyệt web của bạn Bạn đã hoàn thành việc host website của mình trên S3. Sang phần tiếp theo chúng ta cập nhật lại các lambda function\n"
},
{
	"uri": "//localhost:1313/vi/4-frontendintergrationwithfrontend/4.2-configapigateway/",
	"title": "Cấu hình API Gateway",
	"tags": [],
	"description": "",
	"content": "Cập nhật Lambda function Mở bảng điều khiển AWS Lambda Console Chọn hàm upload_documents Comment dòng 13 và mở comment dòng 12 Ấn Deloy Cấu hình API Gateway Mở bảng điều khiển Amazon API Gateway Console\nẤn Create API Kéo xuống mục REST API, ấn Build Để mặc định REST protocol.\nChọn New API Nhập tên API, ví dụ: fcj-dms-api-5801 Chọn kiểu Endpoint là Regional Ấn Create API Chọn API Gateway đã tạo Chọn Create Resource để tạo resource cho API. Nhập tên cho resource: docs, sau đó ấn Create Resource Chọn resource docs, sau đó ấn Create Method Thiết lập method như sau:\nGiữ mặc định kiểu tích hợp là Lambda Function Tích vào Lambda Proxy integration Chọn cùng của Lambda function mà bạn đã tạo Chọn hàm upload_document Cuối cùng ấn Save Sau đó tạo method POST, ấn Create Resource để tạo resource. Nhập tên resource {id}, sau đó ấn Create Resource Chọn resource {id}, sau đó ấn Create Method Thiết lập method như sau:\nGiữ mặc định kiểu tích hợp là Lambda Function Tích vào Lambda Proxy integration Chọn cùng của Lambda function mà bạn đã tạo Chọn hàm list_documents Cuối cùng ấn Save Click Create Method to create a new method Thiết lập method như sau:\nGiữ mặc định kiểu tích hợp là Lambda Function Tích vào Lambda Proxy integration Chọn cùng của Lambda function mà bạn đã tạo Chọn hàm delete_document Cuối cùng ấn Save Chọn method DELETE, sau đó ấn Edit tại mục Method request settings Mở rộng mục URL Query String Parameters, ấn Add query string để thêm một parameter mới\nNhập tên parameter: file. Parameter này lưu giá trị tên của file mà bạn muốn xoá. Ấn Save Chọn resource docs, sau đó ấn Enable CORS Tích vào POST, sau đó ấn Save Chọn resource {id}, sau đó ấn Enable CORS 21.Tích vào GET và DELETE, sau đó ấn Save Sau khi hoàn thành thiết lập, chúng ta deploy API. Chọn /docs, sau đó ấn Deploy API Chọn [New Stage]\nNhập tên stage: dev Ấn Deploy Ghi lại URL của API dùng cho phần tiếp theo. Mở rộng stage, chọn method POST và ghi lại URL. Chọn method DELETE và ghi lại URL. Chọn method GET và ghi lại URL. Bạn đã hoàn thành việc thiết lập API. Tiếp theo chúng ta sẽ kiểm tra hoạt động của API và tích hợp nó vào ứng dụng của mình.\n"
},
{
	"uri": "//localhost:1313/vi/3-configcognito/3.2-preparation/",
	"title": "Chuẩn bị",
	"tags": [],
	"description": "",
	"content": "Chúng ta thực hiện các bước dưới đây để chuẩn bị cho việc xác thực và lưu tệp với thư viện Amplify trong phần sau:\nCài đặt Amplify CLI, chạy câu lệnh dưới đây: npm install -g @aws-amplify/cli Bạn phải cài đặt NodeJs trước khi cài đặt Amplify CLI Bạn nên tạo một user và cấu hình một AWS profile với thông tin xác thực trên máy của bạn.\nChạy các câu lệnh dưới đây để clone ứng dụng về máy của bạn: git clone https://github.com/AWS-First-Cloud-Journey/FCJ-Serverless-DMS\rcd FCJ-Serverless-DMS\rnpm install Mở project và mở tệp src/component/Home/Upload.js . Comment đoạn code gọi API để tương tác với DynamoDB Để khởi tạo Amplify cho ứng dụng, bạn chạy câu lệnh dưới đây từ thư mục gốc của ứng dụng:\namplify init Nhập theo các thông tin dưới đây::\n? Enter a name for the project `fcjdms`` The following configuration will be applied:\nProject information\n| Name: fcjdms\n| Environment: dev\n| Default editor: Visual Studio Code\n| App type: javascript\n| Javascript framework: react\n| Source Directory Path: src\n| Distribution Directory Path: build\n| Build Command: npm run-script build\n| Start Command: npm run-script start\n? Initialize the project with the above configuration? Yes\nUsing default provider awscloudformation\n? Select the authentication method you want to use: AWS profile\nFor more information on AWS Profiles, see:\nhttps://docs.aws.amazon.com/cli/latest/userguide/cli-configure-profiles.html\n? Please choose the profile you want to use default\n? Help improve Amplify CLI by sharing non sensitive configurations on failures (y/N) › No\nMở bảng điều khiển của CloudFormation\nChọn Stacks ở menu phía bên trái, bạn sẽ thấy stack mới được tạo. Ấn tab Resources bạn sẽ thấy các tài nguyên mà Amplify tạo "
},
{
	"uri": "//localhost:1313/vi/3-configcognito/3.3-authenticationandstorage/3.3.2-storagewithamplify/",
	"title": "Storage với Amplify",
	"tags": [],
	"description": "",
	"content": "Sau khi bạn đã tạo tài khoản với Cognito User Pool thành công, chúng ta sẽ dùng tài khoản đó để upload file lên S3 bucket với Amplify trong phần này.\nẤn tổ hợp Ctrl+C trong terminal hoặc command line\nChạy câu lệnh dưới đây tại thư mục gốc của ứng dụng mà bạn clone về để thêm storage cho ứng dụng:\namplify add storage Chọn và nhập theo các thông tin dưới đây:\n? Please select from one of the below mentioned services: Content (Images, audio, video, etc.) Provide a friendly name for your resource that will be used to label this cateogry in the project: fcjdmsstore Provide bucket name: fcjdmsstore Who should have access: Auth users only What kind of access do you want for Authenticated user? Ấn tổ hợp Ctrl + A Do you want to add a Lambda Trigger for your S3 Bucket? no Chạy câu lệnh sau để cập nhật tài nguyên trên cloud: amplify push Mở lại bảng điều khiển của CloudFormation để kiểm tra xem stack đã được tạo hay chưa. Ấn vào tên của bucket để mở bảng điều khiển của bucket đó Chạy câu lệnh sau để bắt đầu với ứng dụng: npm start Ấn Upload Ấn Add files và chọn những tệp bạn muốn tải lên Thêm tag cho các tệp hoặc có thể bỏ qua. Sau đó ấn Upload Bạn đã tải lên thành công các tệp của mình Quay lại với bảng điều khiển của S3 bucket, kiểm tra xem các file đã được tải lên hay chưa. Vậy là bạn đã hoàn thành việc xác thực người dùng và tải tệp lên S3 với Amplify. Trong S3 bucket đã được tạo thư mục protected bởi vì ứng dụng của chúng ta chọn Access Level là protected. Để tìm hiểu thêm về Access Level, bạn hãy chuyển sang phần tiếp theo.\n"
},
{
	"uri": "//localhost:1313/vi/2-deloydatabase/2.2-createlambdafunctions/",
	"title": "Tạo các Lambda function",
	"tags": [],
	"description": "",
	"content": "Content Tạo function liệt kê Tạo function tạo dữ liệu Tạo function xóa dữ liệu "
},
{
	"uri": "//localhost:1313/vi/2-deloydatabase/2.2-createlambdafunctions/2.2.2-createcreatingfunction/",
	"title": "Tạo function tạo dữ liệu",
	"tags": [],
	"description": "",
	"content": "Trong phần này chúng ta sẽ tạo function để thêm thông tin tài liệu được lưu trong DynamoDB table.\nTạo hàm thêm mới Mở bảng điều kiển AWS Lambda console Nhấn nút Create function Nhập tên function: upload_document Chọn Python 3.9 cho mục Runtime Nhấn nút Create function Nhập vào đoạn code sau cho tệp lambda_function.py: import json import boto3 import os from datetime import datetime, timezone dynamodb = boto3.resource(\u0026#39;dynamodb\u0026#39;) def lambda_handler(event, context): table_name = os.environ[\u0026#39;TABLE_NAME\u0026#39;] now = datetime.now(tz=timezone.utc) dt_string = now.strftime(\u0026#34;%d/%m/%Y %H:%M:%S\u0026#34;) #doc_data = json.loads(event[\u0026#34;body\u0026#34;]) doc_data = event[\u0026#34;body\u0026#34;] path = \u0026#34;protected/{}/{}\u0026#34;.format(doc_data[\u0026#39;identityId\u0026#39;], doc_data[\u0026#39;file\u0026#39;]) doc_data.update({\u0026#34;path\u0026#34;: path, \u0026#34;modified\u0026#34;: dt_string}) table = dynamodb.Table(table_name) table.put_item(Item = doc_data) # TODO implement return { \u0026#39;statusCode\u0026#39;: 200, \u0026#39;body\u0026#39;: \u0026#39;successfully upload!\u0026#39;, \u0026#39;headers\u0026#39;: { \u0026#39;Content-Type\u0026#39;: \u0026#39;application/json\u0026#39;, \u0026#34;Access-Control-Allow-Headers\u0026#34;: \u0026#34;Access-Control-Allow-Headers, Origin, Accept, X-Requested-With, Content-Type, Access-Control-Request-Method,X-Access-Token, XKey, Authorization\u0026#34;, \u0026#34;Access-Control-Allow-Origin\u0026#34;: \u0026#34;*\u0026#34;, \u0026#34;Access-Control-Allow-Methods\u0026#34;: \u0026#34;GET,PUT,POST,DELETE,OPTIONS\u0026#34; } } Sau đó nhấn nút Deloy Đoạn code trên thực hiện lấy biến môi trường TABLE_NAME và dữ liệu của event. Sau đó thêm từng item vào DynamoDB table.\nChúng ta cần thêm biến môi trường cho function. Ấn tab Configuration, sau đó chọn Environment variables ở menu phía bên trái. Ấn Edit Nhấn nút Add environment variable Nhập TABLE_NAME vào key Nhập tên DynamoDB table bạn vừa tạo làm giá trị Nhấn nút Save Tiếp theo, thêm quyền cho function để truy cập vào DynamoDB table Nhấn nút Permission ở menu bên trái Ấn vào tên role mà lambda function đang thực hiện Mở rộng chính sách AWSLambdaBasicExecutionRole… sau đó ấn Edit Nhấn nút JSON. Sao chép đoạn json dưới đây vào editor ,\r{\r\u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;,\r\u0026#34;Action\u0026#34;: [\r\u0026#34;dynamodb:Query\u0026#34;\r],\r\u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:dynamodb:REGION:ACCOUNT_ID:table/Documents\u0026#34;\r} Thay thế REGION và ACCOUNT_ID bằng vùng mà bạn tạo bảng và account id của bạn.\nNhấn nút Review policy Nhấn nút Save changes "
},
{
	"uri": "//localhost:1313/vi/7-configiam/7.2-createuser/",
	"title": "Tạo IAM User",
	"tags": [],
	"description": "",
	"content": "Tạo IAM User Ấn Users, sau đó ấn Create user Tại mục User details: Nhập username: Admin_fcjdmswebstore_5801 Ấn I want to create an IAM user Ấn Custom password, sau đó nhập password Ấn Next Tại mục Set permisstions: Ấn Attach policies directly Tìm kiếm fcj, sau đó chọn fcjdmswebstore_5801_policy Ấn Next Ấn Create user Chọn User mà bạn đã tạo Ấn Create access key Tại mục Access key best practices \u0026amp; alternatives:\nẤn Command Line Interface(CLI) Ấn I understand above recommendation and want to proceed to create an access key Ấn Create access key Tại mục Retrieve access keys\nẤn Download .csv file, sau đó ấn Done "
},
{
	"uri": "//localhost:1313/vi/2-deloydatabase/",
	"title": "Triển khai cơ sở dữ liệu",
	"tags": [],
	"description": "",
	"content": "Nội dung Tạo bảng với DynamoDB Tạo các Lambda function Kiểm tra các function "
},
{
	"uri": "//localhost:1313/vi/3-configcognito/",
	"title": "Cấu hình Cognito",
	"tags": [],
	"description": "",
	"content": "Tổng quan Trong phần này, chúng ta sẽ sử dụng thư viện Amplify để xác thực người dùng bằng Amazon Cognito, upload tệp lên S3 bucket.\nNội dung Chuẩn bị Xác thực và lưu trữ Cấp độ truy cập "
},
{
	"uri": "//localhost:1313/vi/7-configiam/7.3-configiaminapi/",
	"title": "Cấu hình IAM trong API",
	"tags": [],
	"description": "",
	"content": "Cấu hình IAM trong API Mở bảng điều khiển API Gateway Chọn API đã tạo Ấn Resources Chọn method GET, sau đó ấn Edit Tại mục Edit method request: Tại Authorization, chọn AWS_IAM Ấn Save Tương tự, thực hiện với phương thức POST và DELETE.\nẤn /docs, sau đó ấn Deloy API Tại Deloy API\nChọn New stage Nhập tên stage: dev Ấn Deloy "
},
{
	"uri": "//localhost:1313/vi/4-frontendintergrationwithfrontend/4.3-testapiwithpostman/",
	"title": "Kiểm tra API bằng Postman",
	"tags": [],
	"description": "",
	"content": "Trong bước này, chúng ta sẽ kiểm tra hoạt động của các API bằng công cụ Postman\nKiểm tra API liệt kê Tạo collection mới, sau đó ấn Bank collection Nhập tên cho collection, ví dụ như: fcjdmswebstore-5801\nẤn Add request Chọn method GET với abcd1234 Ấn Send Kết quả thành công Kiểm tra API thêm mới Tương tự thêm request mới Chọn method POST Nhập URL của API ghi đã ghi lại từ bước trước Trong mục Body, chọn raw Sao chép đoạn dưới đây: {\r\u0026#34;user_id\u0026#34;: \u0026#34;abcd1234\u0026#34;,\r\u0026#34;file\u0026#34;: \u0026#34;flowers.png\u0026#34;,\r\u0026#34;folder\u0026#34;: \u0026#34;\u0026#34;,\r\u0026#34;identityId\u0026#34;: \u0026#34;123456cvbn\u0026#34;,\r\u0026#34;modified\u0026#34;: \u0026#34;21-03-2023\u0026#34;,\r\u0026#34;size\u0026#34;: \u0026#34;32KB\u0026#34;,\r\u0026#34;type\u0026#34;: \u0026#34;png\u0026#34;,\r\u0026#34;tag\u0026#34;: \u0026#34;image\u0026#34;\r} Ấn Send Mở bảng điều khiển DynamoDB, chọn Documents và chọn Explore items để kiểm tra kết quả: Kiểm tra API xóa Tương tự thêm request mới Chọn method DELETE Nhập URL của API ghi đã ghi lại từ bước trước, thay thế {id} với abcd1234 Tại mục Params, nhập file cho key và flowers.png cho value Kết quả thành công Quay lại bảng Documents, ấn nút Refresh để xem kết quả "
},
{
	"uri": "//localhost:1313/vi/2-deloydatabase/2.3-testlambdafunctions/",
	"title": "Kiểm tra các funcrion",
	"tags": [],
	"description": "",
	"content": "Trong phần này chúng ta sẽ tạo kiểm tra xem các function có hoạt động đúng hay không.\nĐể kiểm tra các function, bạn hãy tải tệp dưới đây về máy và chạy câu lệnh: aws dynamodb batch-write-item --request-items file://documentData.json\n📎 Document Data\ndocumentData.json (3 KB) Kiểm tra function liệt kê Mở bảng điều kiển của function list_documents Ấn tab Test Nhập tc_1 cho tên event Nhập đoạn json dưới đây cho Event JSON { \u0026#34;pathParameters\u0026#34;: {\r\u0026#34;id\u0026#34;: \u0026#34;abcd1234\u0026#34;\r}\r} Ấn Save, sau đó ấn Test Bạn sẽ nhận kết quả trả về là toàn bộ thông tin của các tệp của người dùng với id là abcd1234 Kiểm tra function tạo dữ liệu Mở bảng điều khiển của function upload_document Ấn tab Test Nhập tc_1 cho tên event Nhập đoạn json dưới đây cho Event JSON {\r\u0026#34;body\u0026#34;:{\r\u0026#34;user_id\u0026#34;: \u0026#34;abcd1234\u0026#34;,\r\u0026#34;file\u0026#34;: \u0026#34;aws_serverless.doc\u0026#34;,\r\u0026#34;folder\u0026#34;: \u0026#34;\u0026#34;,\r\u0026#34;identityId\u0026#34;: \u0026#34;123456cvbn\u0026#34;,\r\u0026#34;modified\u0026#34;: \u0026#34;13-03-2023\u0026#34;,\r\u0026#34;size\u0026#34;: \u0026#34;2MB\u0026#34;,\r\u0026#34;type\u0026#34;: \u0026#34;doc\u0026#34;,\r\u0026#34;tag\u0026#34;: \u0026#34;aws, serverless\u0026#34;\r}\r} Ấn Save, sau đó ấn Test Bạn sẽ nhận kết quả trả về là succeeded Mở bảng Documents để kiểm tra xem đã thêm thành công hay chưa Kiểm tra function xóa dữ liệu Mở bảng điều kiển của function delete_documents Ấn tab Test Nhập tc_1 cho tên event Nhập đoạn json dưới đây cho Event JSON {\r\u0026#34;pathParameters\u0026#34;: {\r\u0026#34;id\u0026#34;: \u0026#34;abcd1234\u0026#34;\r},\r\u0026#34;queryStringParameters\u0026#34;: {\r\u0026#34;file\u0026#34;: \u0026#34;aws-exports.js\u0026#34;\r}\r} Ấn Save, sau đó ấn Test Bạn sẽ nhận kết quả trả về là succeeded Mở bảng Documents để xem là đã xóa thành công hay chưa Vậy là bạn đã hoàn thành tạo các Lambda function tương tác với DynamoDB. Trong bài tiếp theo chúng ta xác thực vào lưu trữ với thư viện Amplify.\n"
},
{
	"uri": "//localhost:1313/vi/2-deloydatabase/2.2-createlambdafunctions/2.2.3-createdeletingfunction/",
	"title": "Tạo function xóa dữ liệu",
	"tags": [],
	"description": "",
	"content": "Trong phần này chúng ta sẽ tạo function để xoá thông tin tài liệu được lưu trong DynamoDB table theo id của người dùng và tên tệp.\nTạo hàm xóa dữ liệu Mở bảng điều kiển AWS Lambda console Nhấn nút Create function Nhập tên function: delete_documents Chọn Python 3.9 cho mục Runtime Nhấn nút Create function Nhập vào đoạn code sau cho tệp lambda_function.py: import json import boto3 import os client = boto3.resource(\u0026#39;dynamodb\u0026#39;) def lambda_handler(event, context): # TODO implement table_name = os.environ[\u0026#39;TABLE_NAME\u0026#39;] error = None doc_pk = event[\u0026#39;pathParameters\u0026#39;][\u0026#39;id\u0026#39;] print(\u0026#34;doc_pk \u0026#34;, doc_pk) doc_sk = event[\u0026#39;queryStringParameters\u0026#39;][\u0026#39;file\u0026#39;] print(\u0026#34;doc_sk \u0026#34;, doc_sk) table = client.Table(table_name) key = { \u0026#39;user_id\u0026#39;:doc_pk, \u0026#39;file\u0026#39;: doc_sk } try: table.delete_item(Key = key) except Exception as e: error = e except Exception as e: error = e if error is None: message = \u0026#39;delete document successful!\u0026#39; else: print(error) message = \u0026#39;delete document fail\u0026#39; return { \u0026#39;statusCode\u0026#39;: 200, \u0026#39;body\u0026#39;: message, \u0026#39;headers\u0026#39;: { \u0026#39;Content-Type\u0026#39;: \u0026#39;application/json\u0026#39;, \u0026#39;Access-Control-Allow-Origin\u0026#39;: \u0026#39;*\u0026#39; }, } Sau đó nhấn nút Deloy Đoạn code trên thực hiện lấy biến môi trường TABLE_NAME và partition key và sort key từ event. Sau đó thêm xoá item có partition key và sort key khớp với input.\nChúng ta cần thêm biến môi trường cho function. Ấn tab Configuration, sau đó chọn Environment variables ở menu phía bên trái. Ấn Edit Nhấn nút Add environment variable Nhập TABLE_NAME vào key Nhập tên DynamoDB table bạn vừa tạo làm giá trị Nhấn nút Save Tiếp theo, thêm quyền cho function để truy cập vào DynamoDB table Nhấn nút Permission ở menu bên trái Ấn vào tên role mà lambda function đang thực hiện Mở rộng chính sách AWSLambdaBasicExecutionRole… sau đó ấn Edit Nhấn nút JSON. Sao chép đoạn json dưới đây vào editor ,\r{\r\u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;,\r\u0026#34;Action\u0026#34;: \u0026#34;dynamoDB:PutItem\u0026#34;,\r\u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:dynamodb:REGION:ACCOUNT_ID:table/Documents\u0026#34;\r} Thay thế REGION và ACCOUNT_ID bằng vùng mà bạn tạo bảng và account id của bạn.\nNhấn nút Review policy Nhấn nút Save changes "
},
{
	"uri": "//localhost:1313/vi/3-configcognito/3.3-authenticationandstorage/",
	"title": "Xác thực và lưu trữ",
	"tags": [],
	"description": "",
	"content": "Đây là phần chính của workshop này, bạn sẽ thêm xác thực người dùng và storage với Amplify vào project.\nNội dung Authentication với amplify Storage với amplify "
},
{
	"uri": "//localhost:1313/vi/3-configcognito/3.4-accesslevel/",
	"title": "Cấp độ truy cập",
	"tags": [],
	"description": "",
	"content": "Khi tải tệp lên S3 bucket, chúng ta có 3 cấp độ truy cập là public, protected và private:\nPublic: Tất cả người dùng ứng dụng của bạn có thể truy cập. Các tệp được lưu trữ dưới đường dẫn chung/trong bộ chứa S3 của bạn. Protected: Tất cả người dùng có thể đọc nhưng chỉ người dùng tạo mới có thể ghi. Các tệp được lưu trữ trong protected/{user_identity_id}/ trong đó user_identity_id tương ứng với ID nhận dạng Amazon Cognito duy nhất cho người dùng đó. Private: Chỉ có thể truy cập cho người dùng cá nhân. Các tệp được lưu trữ trong private/{user_identity_id}/ trong đó user_identity_id tương ứng với ID nhận dạng Amazon Cognito duy nhất cho người dùng đó. Trong phần này chúng ta sẽ thay đổi quyền của người dùng để tải tệp lên S3.\nTruy cập vào bảng điều khiển của Cognito console\nẤm Identity pools ở menu bên trái Chọn fcjdms\u0026hellip;identitypool\u0026hellip; Ấn tab User access và ghi lại tên của Authenticated role Mở bảng điều khiển của IAM Role\nChọn Roles ở menu bên trái Nhập tên của Authenticated role và ấn vào role tìm thấy Mở rộng chính sách để xem quyền của user Chọn chính sách Protected_policy_\u0026hellip;\nẤn Remove Chúng ta sẽ xóa quyền ở mức độ truy cập là protected bởi vì ứng dụng đang sử dụng cấp độ đó.\nNhập tên chính sách và ấn Delete Bạn đã xóa thành công Trở về ứng dụng và chọn Add files, tiếp tục chọn tệp mà bạn muốn tải lên. Sau đó ấn Upload Truy cập vào bảng điều khiển Inspect | Console. Chúng ta đã nhận được một lỗi. Thêm lại quyền cho người dùng.\nẤm Add permissions Chọn Create inline policy Chọn service là S3 Tại mục Actions | Read, chọn GetObject Tại mục Actions | Write, chọn PutObject và DeleteObject Tại mục Resources, chọn Add ARN Nhập ARN: arn:aws:s3:::YOUR_BUCKET-dev/protected/${cognito-identity.amazonaws.com:sub}/* Thay thế YOUR_BUCKET bằng tên bucket mà bạn đã tạo trước đó.\nẤn Add Ấn Review policy Nhập tên chính sách: Protected_policy. Sau đó ấn Create policy Trở về ứng dụng, tải lại tệp mà bạn vừa thất bại\nẤn Add files, chọn tệp mà bạn muốn tải lên Ấn Upload Mở bảng điều khiển của S3 bucket xem tệp đã tải thành công hay chưa. "
},
{
	"uri": "//localhost:1313/vi/4-frontendintergrationwithfrontend/4.4-testapiwithfrontend/",
	"title": "Kiểm tra API với giao diện người dùng",
	"tags": [],
	"description": "",
	"content": "Tổng quan Trong phần này, chúng ta sẽ sử dụng thư viện Amplify để xác thực người dùng bằng Amazon Cognito, upload tệp lên S3 bucket.\nNội dung Chuẩn bị Xác thực và lưu trữ Cấp độ truy cập "
},
{
	"uri": "//localhost:1313/vi/7-configiam/7.4-testiampostman/",
	"title": "Kiểm tra IAM với Postman",
	"tags": [],
	"description": "",
	"content": "Kiểm tra API với Postman Mở Postman Chọn method GET đã tạo Thay thế {id} với abcd1234 Chọn tab Authorization Tại auth type, chọn AWS Signature Nhập Accesskey và Secretkey Nhập AWS Region, ví dụ như: ap-southeast-1 Nhập Service name: execute-api Ấn Send Kết quả thành công Tương tự, thực hiện với phương thức POST và DELETE.\nNếu Authorization chưa được cấu hình thì kết quả sẽ được hiển thị thông báo.\n{\r\u0026#34;message\u0026#34;: \u0026#34;Missing Authentication Token\u0026#34;\r} "
},
{
	"uri": "//localhost:1313/vi/4-frontendintergrationwithfrontend/",
	"title": "Tích hợp giao diện người dùng với API",
	"tags": [],
	"description": "",
	"content": "Nội dung Triển khai giao diện người dùng Cấu hình API Gateway Kiểm tra API với Postman Kiểm tra API với giao diện người dùng "
},
{
	"uri": "//localhost:1313/vi/5-configamazoncloudfront/",
	"title": "Cấu hình Amazon CloudFront",
	"tags": [],
	"description": "",
	"content": "Sử dụng Bảng điều khiển quản lý AWS, để tạo CloudFront distribution và cấu hình nó để phục vụ s3 Bucket mà chúng ta đã tạo trước đó.\nMở bảng điều khiển Amazon CloudFront\nTừ bảng điều khiển, nhấn vàoCreate distribution Chỉ định các cài đặt sau đây cho bản distribution:\nTrong trường Origin domain, chọn S3 bucket mà bạn đã tạo trước đó. Trong trường Origin access, chọn Legacy access identities Trong trường Bucket policy, chọn Yes, update the bucket policy Chọn Create new OAI Chọn Create Các phần còn lại, để mặc định. Trong phần Settings Chọn Use North America, Europe, Asia, Middle East, and Africa vì Việt Nam trong khu vực Asia Trọng mục Default root object - optional, điền tên file đã upload lên S3 - vào ô trống (VD: index.html) Cuộn xuống cuối trang, chọn Create distribution Để quay lại trang CloudFront chọn Distributions từ menu điều hướng bên trái. Sau khi CloudFront tạo bản phân phối của bạn, có thể mất khoảng vài phút. Cột Status \u0026amp; cột Last modified sẽ có thông tin như bên dưới hình. Nhấp vào ID để lấy Distribution domain name Khi bản phân phối của bạn được triển khai, hãy kiểm tra nội dung tĩnh (index.html) của mình bằng CloudFront Distribution domain name mà bạn có thể thấy trong console. Sao chép domain name vào browser để kiểm tra. Kết quả được như hình bên dưới Kiểm tra thời gian browser tải index.html bằng Distribution domain name của CloudFront Nhấp chuột phải, chọn Inspect Bên phải trang, chọn Network Nhấn ký hiệu tải lại trang Hãy thử tưởng tưởng: web tĩnh của bạn được host tại các Region US \u0026amp; có end user tại khu vực Asian, thì thời gian trả về kết quả sau 1 cú lích chuột có thể lên tới vài giây hoặc chục giây, điều đó - sẽ làm ảnh hưởng đến trãi nghiệm người dùng! Nhưng với CloudFront tốc độ sẽ luôn được tối ưu. Kiểm tra địa điểm của CloudFront Pop Nhấp 1 lần vào domain name ở giữa trang Kiểm tra POP của Cloudfront, vì mình đang truy cập ở Hồ Chi Minh - nên POP là: SGN50-P1 (với SGN là Saigon) Giờ đây, bạn có nội dung trong S3 bucket private mà chỉ CloudFront mới có quyền truy cập an toàn. Sau đó, CloudFront phục vụ các yêu cầu, trở thành một dịch vụ lưu trữ tĩnh an toàn, đáng tin cậy một cách hiệu quả với các tính năng như custom certificates và alternate domain names . "
},
{
	"uri": "//localhost:1313/vi/6-protectionwithwaf/",
	"title": "Bảo vệ với WAF",
	"tags": [],
	"description": "",
	"content": "Trong phần này, chúng ta sẽ cấu hình WAF để bảo vệ trang web của mình, chống lại các cuộc tấn công SQL Injection, DDoS,\u0026hellip;\nMở bảng điều khiển AWS WAF Console Ấn Create web ACL Tại mục Web ACL details. Tại Resource type , click Global resources. Tại Name Protection-fcjdmswebstore-5801. Tại Description Web ACL for the fcjdmswebstore-5801. Tại Associated AWS resources ấn Add AWS resources. Tại AWS resources. Ấn CloudFront Distributions Ấn E373NUKDTTVAF8 - d3nkar1nu5y1m0.cloudfront.net (CloudFront Distributions chúng ta đã tạo) Ấn nút Add Ấn nút Next Tại mục Rules.\nẤn Add rules. Ấn Add managed rule groups Tại trang Add managed rule groups, ấn AWS managed rule groups. Chọn Core Rule Set, SQL Database và Known bad inputs Cuộn xuống cuối trang, ấn Add rules Tại trang Add managed rule groups, ấn Next. Tại trang Set rule priority, ấn Next Tại trang Configure metrics, ấn Next Tại trang Review and create web ACL, cuộn xuống cuối trang sau đó ấn Create web ACL. Ấn vào Web ACL created Ấn tab Rule Ấn Add rules, sau đó ấn Add my own rules and rule groups Tại Rule type, ấn Rule builder Nhập tên rule: BlockSQLiLoginPath Tại Statement Tại Inspect, chọn URI path Tại Match type, chọn Exactly matches string Tại String to match, nhập /signin (URL ở trang đăng nhập trong website của bạn) Tại Text transformation Chọn URI decode Ấn Add text transformation, sau đó chọn Lowercase Ấn Add text transformation, sau đó chọn Compress whitespace Chọn Block tại Action Ấn Add rule Ấn Save Mở trang đăng nhập tại website của bạn\nNhập username: ' OR '1'='1\nNhập password: 123\nẤn Sign in Nhấp chuột phải, chọn Inspect\nChọn tab Network\nKiểm tra status code sẽ thấy xuất hiện lỗi 403 Forbidden Mở bảng điều kiển AWS WAF Console Ấn tab Sampled requests Bạn sẽ nhìn thấy Metric name BlockSQLiLoginPath đã bị chặn Finally we have successfully configured WAF for the website, next we will continue to configure CloudWatch\n"
},
{
	"uri": "//localhost:1313/vi/7-configiam/",
	"title": "Cấu hình IAM",
	"tags": [],
	"description": "",
	"content": "Trong phần này, chúng ta sẽ cấu hình IAM để tăng độ bảo mật cho API\nNội dung Tạo chính sách mới Tạo IAM user Cấu hình IAM trong API Kiểm tra IAM với Postman "
},
{
	"uri": "//localhost:1313/vi/8-configcloudwatch/",
	"title": "Config CloudWatch to monitor user actions using API",
	"tags": [],
	"description": "",
	"content": "Ở phần này, chúng ta sẽ cấu hình CloudWatch để giám sát người dùng sử dụng API.\nMở bảng điều khiển API Gateway\nChọn API đã tạo Chọn Stage\nTại Logs and tracing, ấn Edit Tại Edit logs and tracing Chọn Errors and info logs Ấn Save Mở Postman và gửi bất kỳ yêu cầu nào Mở CloudWatch\nẤn Log groups Chọn API-Gateway-Execution-Logs_66r5ayu9s7/dev Chọn Log streams Sao chép ARN, chúng ta sẽ sử dụng ở phần tiếp theo. Kết quả thành công Ở đây chúng ta sẽ nhìn thấy tất cả các hành động chúng ta đã hoàn thành với API, chúng ta đã thành công với phương thức GET. Chúng ta sẽ chỉnh sửa ở phần Log để xem nhiều thông tin hơn.\nMở lại Stages Tại Logs and tracing, ấn Edit Dán ARN chúng ta đã ghi lại vào đây Sao chép đoạn code bên dưới dán vào Log format { \u0026#34;requestId\u0026#34;:\u0026#34;$context.requestId\u0026#34;, \u0026#34;ip\u0026#34;:\u0026#34;$context.identity.sourceIp\u0026#34;, \u0026#34;userAgent\u0026#34;:\u0026#34;$context.identity.userAgent\u0026#34;, \u0026#34;requestTime\u0026#34;:\u0026#34;$context.requestTime\u0026#34;, \u0026#34;method\u0026#34;:\u0026#34;$context.httpMethod\u0026#34;, \u0026#34;path\u0026#34;:\u0026#34;$context.resourcePath\u0026#34;, \u0026#34;status\u0026#34;:\u0026#34;$context.status\u0026#34;, \u0026#34;error\u0026#34;:\u0026#34;$context.error.message\u0026#34; } Ấn Save Mở Postman và gửi yêu cầu một lần nữa Mở CloudWatch và chọn API-Gateway-Execution-Logs_66r5ayu9s7/dev Chọn Log streams mới nhất Bạn có thể nhìn thấy thông tin chi tiết sau khi chúng ta đã cấu hình. "
},
{
	"uri": "//localhost:1313/vi/9-cleanup/",
	"title": "Dọn dẹp tài nguyên",
	"tags": [],
	"description": "",
	"content": "Delete WAF Resources Delete WAF Web ACL: Mở bảng điều khiển AWS WAF console Select your Web ACL Remove associated CloudFront distribution Click Delete Delete CloudFront Distribution Delete CloudFront distribution: Go to the CloudFront console Select your distribution Click Disable and wait for deployment Once disabled, click Delete Delete API Gateway Resources Delete the API Gateway: Go to the API Gateway console Select your API Click Actions → Delete API Confirm deletion Delete Lambda Functions Delete Lambda functions: Go to the Lambda console Delete all functions created (listing, creating, deleting) Click Actions → Delete Delete Cognito Resources Delete Cognito User Pool: Go to the Cognito console Delete User Pool and Identity Pool created by Amplify Delete S3 Resources Delete S3 buckets: Go to the S3 console Empty and delete all buckets created Delete Amplify deployment bucket Delete DynamoDB Table Delete DynamoDB table: Go to the DynamoDB console Select the Documents table Click Delete table Delete IAM Resources Delete IAM roles and policies: Go to the IAM console Delete custom roles and policies created Delete IAM users created for testing Delete CloudWatch Resources Delete CloudWatch log groups (optional): Go to the CloudWatch console Navigate to Logs → Log groups Delete log groups created by services Delete resources in the order listed above to avoid dependency issues. CloudFront distributions take 15-20 minutes to delete.\n"
},
{
	"uri": "//localhost:1313/vi/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/vi/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]